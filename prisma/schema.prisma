// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String   @unique
  email     String   @unique
  name      String
  habits    Habit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum HabitType {
  BUILD
  QUIT
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum TimeOfDay {
  ANY
  MORNING
  AFTERNOON
  EVENING
}

model Habit {
  id         Int      @id @default(autoincrement())
  isArchived Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  title       String
  description String?
  icon        String?   @default("default")
  frequency   Frequency
  timeOfDay   TimeOfDay @default(ANY)
  type        HabitType @default(BUILD)
  overflow    Boolean   @default(false) // If true, the habit can be completed more than the target count

  daysOfWeek     Int[]                 @default([0, 1, 2, 3, 4, 5, 6]) // 0 = Sunday, 6 = Saturday
  metric         String                @default("times")
  targetCount    Int                   @default(1)
  startDate      DateTime
  endDate        DateTime?
  yearlyProgress HabitYearlyProgress[]
  tags           String[]              @default([])
}

model HabitYearlyProgress {
  id          Int      @id @default(autoincrement())
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId     Int
  year        Int
  completions String // Comma-delimited string for habit completions (e.g., "1,0,1,S,1,0,...")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([habitId, year])
}
